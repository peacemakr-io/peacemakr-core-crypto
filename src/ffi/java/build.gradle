plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
}

def release_version = "0.0.2"

task setupBuildDir(type:Exec) {
    commandLine 'mkdir', '-p', buildDir.path
}

task setupNativeDir(type:Exec) {
    workingDir buildDir.path
    commandLine 'mkdir', '-p', 'native'
    dependsOn += 'setupBuildDir'
}

task cmake(type:Exec) {
    workingDir buildDir.path + "/native"

    if (project.hasProperty("release")) {
        commandLine 'cmake', '../../../../..',
                '-DCMAKE_BUILD_TYPE=Release',
                '-DSTATIC_LIBC=ON',
                '-DCMAKE_INSTALL_PREFIX=../../src/main/resources',
                '-DOPENSSL_ROOT_DIR=/usr/local/opt/openssl@1.1',
                '-DPEACEMAKR_BUILD_JAVA=ON'
    } else {
        commandLine 'cmake', '../../../../..',
                '-DCMAKE_BUILD_TYPE=Debug',
                '-DSTATIC_LIBC=ON',
                // Disable ASAN because otherwise it gets loaded late. You can enable this with some manual work.
                '-DASAN=OFF',
                '-DCMAKE_INSTALL_PREFIX=../../src/main/resources',
                '-DOPENSSL_ROOT_DIR=/usr/local/opt/openssl@1.1',
                '-DPEACEMAKR_BUILD_JAVA=ON'
    }


    dependsOn += 'setupNativeDir'
}

task makeInstall(type:Exec) {
    workingDir buildDir.path + "/native"
    commandLine 'make', 'install'

    dependsOn += 'cmake'
}

task makeCheck(type:Exec) {
    workingDir buildDir.path + "/native"
    commandLine 'make', 'check'

    dependsOn += 'cmake'
}

task buildLinux(type:Exec) {
    workingDir buildDir.path + "/../../../.."
    if (project.hasProperty("release")) {
        commandLine "/bin/bash", "-c", "./bin/build-java-linux.sh release"
    } else {
        commandLine "/bin/bash", "-c", "./bin/build-java-linux.sh"
    }

    dependsOn += 'makeInstall'
}

compileJava.dependsOn += 'makeInstall'

test {
    useJUnit()
    failFast = true
    reports.html.enabled = true
    dependsOn += 'makeCheck'
}

task removeInstall(type:Exec) {
    commandLine 'rm', '-rf', 'src/main/resources/include', 'src/main/resources/lib'
}
clean.dependsOn += 'removeInstall'

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
        }
    }

    test {
        java {
            srcDir 'src/test/java'
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
}

sourceCompatibility = 1.7

jar {
    baseName = "peacemakr-core-crypto"
    version = release_version
    manifest {
        attributes (
                'Name': 'corecrypto',
                'Specification-Title': 'Peacemakr Secure Data Platform',
                'Specification-Version': '1.0',
                'Specification-Vendor': 'Peacemakr Secure Data Platform',
                'Implementation-Title': 'io.peacemakr.corecrypto',
                'Implementation-Version': '0',
                'Implementation-Vendor': 'Peacemakr Secure Data Platform',
        )
    }

    dependsOn += 'test'
    dependsOn += 'buildLinux'
}

repositories {
    mavenCentral()
}

dependencies {
    testCompile "junit:junit:4.12"
}

// Publish to Maven Central
task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

signing {
    sign configurations.archives
}

publishing {
    // Get secret properties
    ext["signing.keyId"] = ''
    ext["signing.password"] = ''
    ext["signing.secretKeyRingFile"] = ''
    ext["ossrhUsername"] = ''
    ext["ossrhPassword"] = ''

    File secretPropsFile = project.rootProject.file(System.properties['user.home'] + "/.gradle/gradle.properties")
    if (secretPropsFile.exists()) {
        println "Found secret props file, loading props"
        Properties p = new Properties()
        p.load(new FileInputStream(secretPropsFile))
        p.each { name, value ->
            ext[name] = value
        }
    } else {
        println "No props file, loading env vars"
        ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
        ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
        ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
        ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
        ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
    }

    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)
            groupId 'io.peacemakr'
            artifactId 'peacemakr-core-crypto'
            version release_version

            from components.java

            // create the sign pom artifact
            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }

            artifact(sourceJar) {
                classifier = 'sources'
            }
            artifact(javadocJar) {
                classifier = 'javadoc'
            }

            // create the signed artifacts
            project.tasks.signArchives.signatureFiles.each {
                artifact(it) {
                    def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                    } else {
                        classifier = null
                    }
                    extension = 'jar.asc'
                }
            }
        }
    }
    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            name 'Peaceamakr Core Crypto'
            description 'The opensource Peacemakr Core Crypto'
            url 'http://maven.apache.org'
            organization {
                name 'io.peacemakr'
                url 'https://peacemakr.io/'
            }
            licenses {
                license {
                    name 'Apache License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/peacemakr-io/peacemakr-core-crypto/tree/master'
                connection 'scm:git:git://github.com/peacemakr-io/peacemakr-core-crypto.git'
                developerConnection 'scm:git:ssh://github.com:peacemakr-io/peacemakr-core-crypto.git'
            }
            developers {
                developer {
                    name 'Peacemakr'
                    email 'info@peacemakr.io'
                    organization 'Peacemakr'
                    organizationUrl 'https://peacemakr.io/'
                }
            }
        }
    }
}
model {
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
}
